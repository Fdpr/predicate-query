start: "find" CNAME ":" formula -> find_statement

_rep_sep{x, sep}: x (sep x)*

?formula: _rep_sep{formula, "<->"}      -> equivalence_formula
        | _rep_sep{formula, "->"}       -> implication_formula
        | _rep_sep{formula, "|"}        -> or_formula
        | _rep_sep{formula, "&"}        -> and_formula
        | "~" formula                   -> negation_formula
        | "exists" CNAME ":" formula    -> exists_formula
        | "forall" CNAME ":" formula    -> forall_formula
        | predicate
        | "(" formula ")"


?predicate: "Body" "(" CNAME ")"                                -> body_predicate
            | "ForceElement" "(" CNAME ")"                      -> force_element_predicate
            | "Constraint" "(" CNAME ")"                        -> constraint_predicate
            | "Connection" "(" CNAME ")"                        -> connection_predicate
            | "Joint" "(" CNAME ")"                             -> joint_predicate
            | "IsType" "(" CNAME "," ESCAPED_STRING ")"         -> type_predicate
            | "AreConnected" "(" CNAME "," CNAME ")"            -> connecting_predicate
            | "ParamIs" "(" CNAME "," INT "," literal ")"       -> is_predicate
            | "ParamLt" "(" CNAME "," INT "," literal ")"       -> lt_predicate
            | "ParamGt" "(" CNAME "," INT "," literal ")"       -> gt_predicate
            | CNAME "=" CNAME                                   -> equality_predicate

?literal: SIGNED_NUMBER
        | ESCAPED_STRING


%import common.CNAME
%import common.WS
%import common.ESCAPED_STRING 
%import common.INT
%import common.SIGNED_NUMBER
%ignore WS